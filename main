import pygame
import sys
from button import Button
pygame.init()



SCREEN = pygame.display.set_mode((1280, 720))
pygame.display.set_caption("Menu")

BG = pygame.image.load("Images/menu.bg.castle.png")
SPLASH_BG = pygame.image.load("Images/splash.loading.png")
SPLASH_ALPHA_INCREMENT = 5  # Adjust the increment for smoother or faster fading

SKELE = pygame.image.load("Images/Skele.png")
SKELE = pygame.transform.scale(SKELE, (200,400))


audio_on = True

def get_font(size):  # Returns Press-Start-2P in the desired size
    return pygame.font.Font("Font/font.ttf", size)

def splash_screen():
    splash_alpha = 0
    fade_in = True
    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        SCREEN.fill((0, 0, 0))  # Fill the screen with black background

        # Update splash screen image with the current alpha value
        splash_with_alpha = SPLASH_BG.copy()
        splash_with_alpha.set_alpha(splash_alpha)
        SCREEN.blit(splash_with_alpha, (0, 0))

        pygame.display.update()

        if fade_in:
            splash_alpha += SPLASH_ALPHA_INCREMENT
            if splash_alpha >= 255:
                splash_alpha = 255
                fade_in = False
        else:
            splash_alpha -= SPLASH_ALPHA_INCREMENT
            if splash_alpha <= 0:
                return  # Exit the function once the splash screen fades out

        clock.tick(30)  # Limit the frame rate to 30 FPS

def play():
    while True:

        PLAY_MOUSE_POS = pygame.mouse.get_pos()

        SCREEN.fill("black")

        PLAY_TEXT = get_font(45).render("PLAY SCREEN", True, "White")
        PLAY_RECT = PLAY_TEXT.get_rect(center=(640, 260))
        SCREEN.blit(PLAY_TEXT, PLAY_RECT)

        PLAY_BACK = Button(image=None, pos=(640, 460),
                           text_input="BACK", font=get_font(75), base_color="White", hovering_color="Green")

        PLAY_BACK.changeColor(PLAY_MOUSE_POS)
        PLAY_BACK.update(SCREEN)

        from Board import run_board
        run_board()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if PLAY_BACK.checkForInput(PLAY_MOUSE_POS):
                    return  # Return from the play() function
        pygame.display.update()

def options():
    global audio_on
    while True:
        OPTIONS_MOUSE_POS = pygame.mouse.get_pos()

        SCREEN.fill("white")

        OPTIONS_TEXT = get_font(45).render("Settings", True, "Black")
        OPTIONS_RECT = OPTIONS_TEXT.get_rect(center=(640, 100))
        SCREEN.blit(OPTIONS_TEXT, OPTIONS_RECT)

        AUDIO_TEXT = "AUDIO: ON" if audio_on else "AUDIO: OFF"
        AUDIO_BUTTON = Button(image=None, pos=(640,460),text_input=AUDIO_TEXT, font=get_font(60),base_color="Black",hovering_color='Green')

        TUT_TEXT = ("TUTORIAL/CONTROLS")
        TUT_BUTTON = Button(image=None, pos=(640,300),text_input=TUT_TEXT, font=get_font(60),base_color="Black",hovering_color='Green')
        TUT_BUTTON.changeColor(OPTIONS_MOUSE_POS)
        TUT_BUTTON.update(SCREEN)


        AUDIO_BUTTON.changeColor(OPTIONS_MOUSE_POS)
        AUDIO_BUTTON.update(SCREEN)

        OPTIONS_BACK = Button(image=None, pos=(640, 600),
                              text_input="BACK", font=get_font(75), base_color="Black", hovering_color="Green")

        OPTIONS_BACK.changeColor(OPTIONS_MOUSE_POS)
        OPTIONS_BACK.update(SCREEN)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if OPTIONS_BACK.checkForInput(OPTIONS_MOUSE_POS):
                    return  # Return from the options() function
                if AUDIO_BUTTON.checkForInput(OPTIONS_MOUSE_POS):
                    audio_on = not audio_on
                    if audio_on:
                        pygame.mixer.music.unpause()
                    else:
                        pygame.mixer.music.pause()
                if TUT_BUTTON.checkForInput(OPTIONS_MOUSE_POS):
                    tut()

        pygame.display.update()

def tut():
    while True:
        OPTIONS_MOUSE_POS = pygame.mouse.get_pos()

        SCREEN.fill("white")

        OPTIONS_TEXT = get_font(50).render("Tutorial", True, "Black")
        OPTIONS_RECT = OPTIONS_TEXT.get_rect(center=(640, 50))
        SCREEN.blit(OPTIONS_TEXT, OPTIONS_RECT)


        #AUDIO_BUTTON = Button(image=None, pos=(640,460),text_input=AUDIO_TEXT, font=get_font(60),base_color="Black",hovering_color='Green')

        TUT_TEXT = get_font(10).render("In this game, the user plays as a brave warrior named Skele." ,True,"Black")
        TUT_RECT = TUT_TEXT.get_rect(center=(300, 200))
        SCREEN.blit(TUT_TEXT, TUT_RECT)

        TUT_TEXT2 = get_font(10).render("Skele is on a quest to collect as many coins as possible.", True, "Black")
        TUT_RECT2 = TUT_TEXT2.get_rect(center=(290, 230))
        SCREEN.blit(TUT_TEXT2, TUT_RECT2)

        TUT_TEXT3 = get_font(10).render("In this boardgame style quest, players will use the ", True, "Black")
        TUT_RECT3 = TUT_TEXT3.get_rect(center=(900, 200))
        SCREEN.blit(TUT_TEXT3, TUT_RECT3)

        TUT_TEXT4 = get_font(10).render("spacebar to roll a six sided die to determine their ", True, "Black")
        TUT_RECT4 = TUT_TEXT4.get_rect(center=(900, 230))
        SCREEN.blit(TUT_TEXT4, TUT_RECT4)

        TUT_TEXT5 = get_font(10).render("movement. If there is a fork in the path, players ", True, "Black")
        TUT_RECT5 = TUT_TEXT5.get_rect(center=(900, 260))
        SCREEN.blit(TUT_TEXT5, TUT_RECT5)

        TUT_TEXT6 = get_font(10).render("can use the directional arrows to decide which way ", True, "Black")
        TUT_RECT6 = TUT_TEXT6.get_rect(center=(900, 290))
        SCREEN.blit(TUT_TEXT6, TUT_RECT6)

        TUT_TEXT7 = get_font(10).render("to go. Players may also encounter minigames throughout ", True, "Black")
        TUT_RECT7 = TUT_TEXT7.get_rect(center=(900,320 ))
        SCREEN.blit(TUT_TEXT7, TUT_RECT7)

        TUT_TEXT7 = get_font(10).render("the game which will earn them coins. All minigames ", True, "Black")
        TUT_RECT7 = TUT_TEXT7.get_rect(center=(900, 350))
        SCREEN.blit(TUT_TEXT7, TUT_RECT7)

        TUT_TEXT7 = get_font(10).render("use the directional arrows on the keyboard. Players ",
            True, "Black")
        TUT_RECT7 = TUT_TEXT7.get_rect(center=(900, 380))
        SCREEN.blit(TUT_TEXT7, TUT_RECT7)

        TUT_TEXT7 = get_font(10).render("can press 'e' key to return tothe main menu from the map",
            True, "Black")
        TUT_RECT7 = TUT_TEXT7.get_rect(center=(900, 410))
        SCREEN.blit(TUT_TEXT7, TUT_RECT7)


        #"sided die to determine"
        TUT_TEXT90 = (
            "In this boardgame style quest, players will use the spacebar to roll a six sided die to determine "
            "their movement. If there is a their movement. If there is a players can use the directional arrows to decide "
            "which way to go. Players may also encounter minigames throughout the game which will earn them coins. "
            "All minigames use the directional arrows on the keyboard. Players can press the 'e' key to return "
            "to the main menu from the map.")

        SCREEN.blit(SKELE,(335, 250))





        #AUDIO_BUTTON.changeColor(OPTIONS_MOUSE_POS)
        #AUDIO_BUTTON.update(SCREEN)

        TUT_BACK = Button(image=None, pos=(640, 650),
                              text_input="BACK", font=get_font(50), base_color="Black", hovering_color="Green")

        TUT_BACK.changeColor(OPTIONS_MOUSE_POS)
        TUT_BACK.update(SCREEN)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if TUT_BACK.checkForInput(OPTIONS_MOUSE_POS):
                    return  # Return from the options() function

        pygame.display.update()
def main_menu():
    while True:
        SCREEN.blit(BG, (0, 0))

        MENU_MOUSE_POS = pygame.mouse.get_pos()

        MENU_TEXT = get_font(55).render("ANCIENT MAGIC QUEST", True, "Green")
        MENU_RECT = MENU_TEXT.get_rect(center=(640, 100))

        PLAY_BUTTON = Button(image=pygame.image.load("Images/Play Rect.png"), pos=(640, 250),
                             text_input="PLAY", font=get_font(75), base_color="#d7fcd4", hovering_color="White")
        OPTIONS_BUTTON = Button(image=pygame.image.load("Images/Options Rect.png"), pos=(640, 400),
                                text_input="OPTIONS", font=get_font(75), base_color="#d7fcd4", hovering_color="White")
        QUIT_BUTTON = Button(image=pygame.image.load("Images/Quit Rect.png"), pos=(640, 550),
                             text_input="QUIT", font=get_font(75), base_color="#d7fcd4", hovering_color="White")

        SCREEN.blit(MENU_TEXT, MENU_RECT)

        for button in [PLAY_BUTTON, OPTIONS_BUTTON, QUIT_BUTTON]:
            button.changeColor(MENU_MOUSE_POS)
            button.update(SCREEN)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if PLAY_BUTTON.checkForInput(MENU_MOUSE_POS):
                    play()
                if OPTIONS_BUTTON.checkForInput(MENU_MOUSE_POS):
                    options()
                if QUIT_BUTTON.checkForInput(MENU_MOUSE_POS):
                    pygame.quit()
                    sys.exit()

        def switch_to_main(self):
            self.current_game = None
        pygame.display.update()

# Load background music and play it
pygame.mixer.music.load("Audio/bg.music.mp3")
pygame.mixer.music.play(-1)  # -1 makes the music loop indefinitely

splash_screen()  # Display splash screen with fade-in/out effect
main_menu()
