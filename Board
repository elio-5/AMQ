import sys
from sprites import *
from settings import *
from os import path
from tilemap import *
pygame.display.init()



class Game:
    def __init__(self):
        pg.init()
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption(TITLE)
        self.clock = pg.time.Clock()
        pg.key.set_repeat(500, 100)
        self.load_data()
        self.yes = False
        self.paused = False
        self.saved_high_score = 0
        file = open('HighScore.txt', 'r')
        for line in file:
            if 'High Score: ' in line:
                self.saved_high_score = int(line.replace('High Score: ', ''))

    #def back_menu(self):
        #if pg.key.get_pressed()[pg.K_e]:
            #import main



    def draw_surface(self):
        #self.surface = pg.Surface((WIDTH,HEIGHT), pg.SRCALPHA)
        self.screen.blit(surface,(0, 0))

    def draw_title(self, text, font_name, size, color, x, y, align="nw"):
        font = pygame.font.Font('Font/font.ttf', 100)
        text_surface = font.render(text, True, RED)
        text_rect = text_surface.get_rect()
        if align == "nw":
            text_rect.topleft = (x, y)
        if align == "ne":
            text_rect.topright = (x, y)
        if align == "sw":
            text_rect.bottomleft = (x, y)
        if align == "se":
            text_rect.bottomright = (x, y)
        if align == "n":
            text_rect.midtop = (x, y)
        if align == "s":
            text_rect.midbottom = (x, y)
        if align == "e":
            text_rect.midright = (x, y)
        if align == "w":
            text_rect.midleft = (x, y)
        if align == "center":
            text_rect.center = (x, y)
        self.screen.blit(text_surface, text_rect)
    def draw_text(self, text, font_name, size, color, x, y, align="nw"):
        font = pygame.font.Font('Font/font.ttf', 12)
        text_surface = font.render(text, True, YELLOW)
        text_rect = text_surface.get_rect()
        if align == "nw":
            text_rect.topleft = (x, y)
        if align == "ne":
            text_rect.topright = (x, y)
        if align == "sw":
            text_rect.bottomleft = (x, y)
        if align == "se":
            text_rect.bottomright = (x, y)
        if align == "n":
            text_rect.midtop = (x, y)
        if align == "s":
            text_rect.midbottom = (x, y)
        if align == "e":
            text_rect.midright = (x, y)
        if align == "w":
            text_rect.midleft = (x, y)
        if align == "center":
            text_rect.center = (x, y)
        self.screen.blit(text_surface, text_rect)

    def draw_score(self, text, font_name, size, color, x, y, align="nw"):
        font = pygame.font.Font('Font/font.ttf', 75)
        text_surface = font.render(text, True, YELLOW)
        text_rect = text_surface.get_rect()
        if align == "nw":
            text_rect.topleft = (x, y)
        if align == "ne":
            text_rect.topright = (x, y)
        if align == "sw":
            text_rect.bottomleft = (x, y)
        if align == "se":
            text_rect.bottomright = (x, y)
        if align == "n":
            text_rect.midtop = (x, y)
        if align == "s":
            text_rect.midbottom = (x, y)
        if align == "e":
            text_rect.midright = (x, y)
        if align == "w":
            text_rect.midleft = (x, y)
        if align == "center":
            text_rect.center = (x, y)
        self.screen.blit(text_surface, text_rect)
    def draw_map(self):
        map_surface = pg.image.load('Images/Map.png').convert()
        self.screen.blit(map_surface, (0, 0))

    def load_data(self):
        game_folder = path.dirname(__file__)
        img_folder = path.join(game_folder, 'Images' )
        self.map = open('map.txt', 'r')
        self.player_img = pg.image.load(path.join(img_folder, PLAYER_IMG)).convert_alpha()
        self.dice_images = []
        self.dice_rolling_images = []
        for num in range(1, 7):
            dice_image = pg.image.load('Images/dice' + str(num) + '.png')
            self.dice_images.append(dice_image)
        for num in range(1, 9):
            dice_rolling_image = pg.image.load('Images/roll' + str(num) + '.png')
            self.dice_rolling_images.append(dice_rolling_image)


    def new(self):
        # initialize all variables and do all the setup for a new game
        self.all_sprites = pg.sprite.Group()
        #self.spaces = pg.sprite.Group()
        self.yellowspaces = pg.sprite.Group()
        self.redspaces = pg.sprite.Group()
        self.luckyspaces = pg.sprite.Group()
        self.bossspaces = pg.sprite.Group()
        self.bluespaces = pg.sprite.Group()
        for row, tiles in enumerate(self.map):
            for col, tile in enumerate(tiles):
                if tile == 'b':
                    bluespace(self, col, row)
                if tile == 'y':
                    yellowspace(self, col, row)
                if tile == 'r':
                    redspace(self, col, row)
                if tile == 'c':
                    luckyspace(self, col, row)
                if tile == 'd':
                    bossspace(self, col, row)
                if tile == 's':
                    self.player = Player(self, col, row)



    #def rolls(self):
        #if self.player.rollcount == 4 or self.player.rollcount == 8 or self.player.rollcount == 12 or self.player.rollcount == 16:
            #from miniGame1 import mini1
            #mini1()

    def run(self):
        # game loop - set self.playing = False to end the game
        self.playing = True
        while self.playing:
            self.dt = self.clock.tick(FPS) / 1000
            self.events()
            if not self.paused:
                self.update()
            self.draw()

    def quit(self):
        pg.quit()
        sys.exit()

    def update(self):
        # update portion of the game loop
        if not self.paused:
            self.all_sprites.update()
        if self.player.rollcount >= 13:
            self.playing = False
        if self.player.rollcount == 8:
            self.player.rollcount += 1
            self.paused = True
            from mainMiniGame2 import mini2
            mini2()
            self.player.coins += 8
        elif self.player.rollcount == 4:
            self.player.rollcount += 1
            self.paused = True
            import miniGame1
            self.player.coins += 8
        elif self.player.rollcount == 12:
            self.player.rollcount += 1
            self.paused = True
            import mini3
            self.player.coins += 8




        #hits = pg.sprite.spritecollide(self.player, self.bluespaces, False, collide_hit_rect)


    def draw_grid(self):
        for x in range(0, WIDTH, TILESIZE):
            pg.draw.line(self.screen, LIGHTGREY, (x, 0), (x, HEIGHT))
        for y in range(0, HEIGHT, TILESIZE):
            pg.draw.line(self.screen, LIGHTGREY, (0, y), (WIDTH, y))

    def draw_dice(self):
        self.first = True
        self.dice_num_image = self.dice_images[self.player.rand_num]
        if self.player.is_rolling is False and pg.key.get_pressed()[pg.K_SPACE] and self.player.dice:
            self.screen.blit(self.dice_rolling_images[self.player.rolling_images_counter], (0, 0))
            self.player.rolling_images_counter += 1
            self.first = True
        else:
            if self.player.is_rolling:
                self.screen.blit(self.dice_rolling_images[self.player.rolling_images_counter], (0, 0))
                self.player.rolling_images_counter += 1
                if self.player.rolling_images_counter >= 8:
                    self.player.is_rolling = False
                    self.player.rolling_images_counter = 0
            else:
                self.screen.blit(self.dice_num_image, (0, 0))
                if self.first:
                    self.first = False


    def draw(self):
        self.screen.fill(BGCOLOR)
        self.draw_surface()
        #self.draw_grid()
        self.draw_map()
        self.all_sprites.draw(self.screen)
        self.draw_text('COINS: {}'.format(self.player.coins), COIN_FONT, 10, WHITE, WIDTH-10, 10, align='ne')
        self.draw_dice()
        pg.display.flip()

    def high_score(self):
        if self.player.coins > self.saved_high_score:
            file = open('HighScore.txt','w')
            file.write('High Score: '+ str(self.player.coins))
            file.close()
            self.saved_high_score = self.player.coins

    def events(self):
        # catch all events here

        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.quit()
            if event.type == pg.KEYDOWN:
                self.paused = False
                if event.key == pg.K_ESCAPE:
                    self.quit()
                if event.key == pg.K_e:
                    from main2 import main_menu2
                    self.yes = True
                    main_menu2()


    #def minigame(self):






    def show_start_screen(self):
        pass

    def show_go_screen(self):
        self.high_score()
        self.screen.fill(BLACK)
        self.draw_title("GAME OVER", TITLE_FONT, 200, WHITE, WIDTH / 2, HEIGHT / 2, align="center")
        self.draw_score("HIGH SCORE: {}".format(self.saved_high_score), TITLE_FONT, 200, WHITE, WIDTH / 2, HEIGHT / 4, align="center")
        self.draw_score('SCORE: {}'.format(self.player.coins), TITLE_FONT, 200, WHITE, WIDTH / 2, HEIGHT * 3 / 4, align="center")
        pg.display.flip()
        self.wait_for_key()
    def wait_for_key(self):
        pg.event.wait()
        waiting = True
        while waiting:
            self.clock.tick(FPS)
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    waiting = False
                    self.quit()
                if event.type == pg.KEYDOWN:
                    from main2 import main_menu2
                    self.yes = True
                    main_menu2()
                    waiting = False
# create the game object
def run_board():
    g = Game()
    g.show_start_screen()
    while True:
        g.new()
        g.run()
        g.show_go_screen()
        if g.yes == True:
            break
run_board()
